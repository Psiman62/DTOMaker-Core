using DTOMaker.Gentime;
using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;

namespace DTOMaker.MessagePack
{
    [Generator(LanguageNames.CSharp)]
    public class SourceGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new SyntaxReceiver());
        }

        private void EmitDiagnostics(GeneratorExecutionContext context, TargetBase target)
        {
            // todo fix msg ids
            foreach (var diagnostic in target.SyntaxErrors)
            {
                // report diagnostic
                context.ReportDiagnostic(
                    Diagnostic.Create(
                        new DiagnosticDescriptor(diagnostic.Id, diagnostic.Title, diagnostic.Message,
                            diagnostic.Category, diagnostic.Severity, true), diagnostic.Location));
            }
            foreach (var diagnostic in target.ValidationErrors())
            {
                // report diagnostic
                context.ReportDiagnostic(
                    Diagnostic.Create(
                        new DiagnosticDescriptor(diagnostic.Id, diagnostic.Title, diagnostic.Message,
                            diagnostic.Category, diagnostic.Severity, true), diagnostic.Location));
            }
        }
        private void CheckReferencedAssemblyNamesInclude(GeneratorExecutionContext context, Assembly assembly)
        {
            string packageName = assembly.GetName().Name;
            Version packageVersion = assembly.GetName().Version;
            if (!context.Compilation.ReferencedAssemblyNames.Any(ai => ai.Name.Equals(packageName, StringComparison.OrdinalIgnoreCase)))
            {
                // todo major version error/minor version warning
                // todo fix diag id, title and categ
                context.ReportDiagnostic(Diagnostic.Create(
                        new DiagnosticDescriptor(
                            "MFNSSG001", "DiagnosticTitle",
                            $"The generated code requires a reference to {packageName} (v{packageVersion} or later).",
                            "DiagnosticCategory",
                            DiagnosticSeverity.Warning,
                            true),
                            Location.None));
            }
        }
        public void Execute(GeneratorExecutionContext context)
        {
            if (context.SyntaxContextReceiver is not SyntaxReceiver syntaxReceiver) return;

            // check that the users compilation references the expected libraries
            CheckReferencedAssemblyNamesInclude(context, typeof(Models.DomainAttribute).Assembly);

            foreach (var domain in syntaxReceiver.Domains.Values)
            {
                EmitDiagnostics(context, domain);
                foreach (var entity in domain.Entities.Values.OrderBy(e => e.Name))
                {
                    EmitDiagnostics(context, entity);
                    Version fv = new Version(ThisAssembly.AssemblyFileVersion);
                    string shortVersion = $"{fv.Major}.{fv.Minor}";
                    string hintName = $"{domain.Name}.{entity.Name}.MessagePack.g.cs";
                    // entity options
                    var builder = new StringBuilder();
                    string entityHead =
                        $$"""
                        // <auto-generated>
                        // This file was generated by {{typeof(SourceGenerator).Namespace}}.
                        // NuGet: https://www.nuget.org/packages/DTOMaker.MessagePack
                        // Warning: Changes made to this file will be lost if re-generated.
                        // </auto-generated>
                        #pragma warning disable CS0414
                        #nullable enable
                        using DTOMaker.Runtime;
                        using MessagePack;
                        using System;
                        using System.Runtime.CompilerServices;
                        using System.Threading;
                        using System.Threading.Tasks;
                        namespace {{domain.Name}}.MessagePack
                        {
                            [MessagePackObject]
                            public partial class {{entity.Name}} : I{{entity.Name}}, IFreezable
                            {
                                // todo move to base
                                [IgnoreMember]
                                private volatile bool _frozen;
                                public bool IsFrozen() => _frozen;
                                public IFreezable PartCopy() => new {{entity.Name}}(this);

                                [MethodImpl(MethodImplOptions.NoInlining)]
                                private void ThrowIsFrozenException(string? methodName) => throw new InvalidOperationException($"Cannot call {methodName} when frozen.");

                                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                                private ref T IfNotFrozen<T>(ref T value, [CallerMemberName] string? methodName = null)
                                {
                                    if (_frozen) ThrowIsFrozenException(methodName);
                                    return ref value;
                                }

                                public void Freeze()
                                {
                                    if (_frozen) return;
                                    _frozen = true;
                                    // todo freeze base
                                    // todo freeze model type refs
                                }

                                public {{entity.Name}}() { }
                                public {{entity.Name}}(I{{entity.Name}} source, bool frozen = false)
                                {
                                    _frozen = frozen;
                                    // todo base ctor
                                    // todo freezable members
                        """;
                    builder.AppendLine(entityHead);
                    foreach (var member in entity.Members.Values.OrderBy(m => m.Sequence))
                    {
                        string memberPart1 =
                            // 12sp
                            $$"""
                                        _{{member.Name}} = source.{{member.Name}};
                            """;
                        builder.AppendLine(memberPart1);
                    }
                    string entityPart1 =
                        // 8sp
                        """
                                }

                        """;
                    builder.AppendLine(entityPart1);
                    // begin member map
                    string memberMapHead =
                        """
                                // <field-map>
                                //  Key   Type        Name
                                //  ----  --------    --------
                        """;
                    builder.AppendLine(memberMapHead);
                    foreach (var member in entity.Members.Values.OrderBy(m => m.Sequence))
                    {
                        string memberMapBody =
                            $$"""
                                    //  {{member.Sequence,4:N0}}  {{member.MemberType,-8}}    {{member.Name}}
                            """;
                        builder.AppendLine(memberMapBody);
                    }
                    string memberMapTail =
                        """
                                // </field-map>
                        """;
                    builder.AppendLine(memberMapTail);
                    // end member map
                    // begin member def
                    foreach (var member in entity.Members.Values.OrderBy(m => m.Sequence))
                    {
                        EmitDiagnostics(context, member);
                        string memberDefBody =
                            $$"""
                                    [IgnoreMember] private {{member.MemberType}} _{{member.Name}};
                                    [Key({{member.Sequence}})] public {{member.MemberType}} {{member.Name}}
                                    {
                                        get => _{{member.Name}};
                                        set => _{{member.Name}} = IfNotFrozen(ref value);
                                    }

                            """;
                        builder.AppendLine(memberDefBody);
                    }
                    // end member def
                    string entityTail =
                        """
                            }
                        }
                        """;
                    builder.AppendLine(entityTail);
                    context.AddSource(hintName, builder.ToString());
                }
            }
        }
    }
}
